#labels Phase-Deploy
= Tutorial Using ACPYPI for GROMACS =

== Introduction ==

This tutorial is to show how to prepare a system to run on GROMACS, starting
with a PDB file for a complex protein/ligand.

It is a mere proof of concept. One should see how ACPYPI is trying to do it in
 HowAcpypiWorks.
If you have suggestions about how to improve this tutorial, please send a
comment (at the bottom of the page).

*NB:* Besides *acpypi*, *antechamber* and *babel*, you will need GROMACS with
ffAMBER.

== Getting GROMACS ==

Install [http://www.gromacs.org/ GROMACS]. The current version is 4.0.4.
Something like:

  * `sudo apt-get install gromacs` # if you use Ubuntu Linux, or

  * `fink install gromacs` # if you use Mac

should do the trick.

== Getting [http://chemistry.csulb.edu/ffamber ffAMBER] ==

The appropriate version of ffAMBER for GMX is 4.0.x. Got it with PDFs. You
definitely need to read those papers.

To summarise in a script-like way:
{{{
# assuming you are at acpypi installation folder
gmx_top_dir=/sw/share/gromacs/top
wget -c http://chemistry.csulb.edu/ffamber/ffamber_v4.0-doc.tar.gz
tar xvfz ffamber_v4.0-doc.tar.gz
cd ffamber_v4.0/
sudo \cp -v ffamber_* ${gmx_top_dir}
sudo \cp -v aminoacids-NA.dat ${gmx_top_dir}/aminoacids.dat
sudo \cp -v ffamber*/* ${gmx_top_dir}
# Get ACPYPI additions:
# go to acpypi folder
sudo \cp -vb ffamber_additions/* ${gmx_top_dir}
}}}

*NB:* `/sw/share/gromacs/top/` is pertinent to Mac. Find the equivalent
GROMACS top folder within your platform.

Now you should have an operative GROMACS with ffAMBER.

== Running an Example ==

This is for protein 1BVG.pdb (get it at [http://www.pdb.org PDB]), a homodimer
(HIV protease) with a ligand called DMP. We will use force field Amber99SB.

Luckily, this pdb file has all hydrogens for the ligand, which is necessary for
*antechamber*. One can use either, e.g., `babel -h _mol_w/o_H_.pdb _mol_with_H.pdb`
or [http://www.yasara.org YASARA View] to automatically add missing hydrogens to
your compound. The former just puts 'H' for atom names while the latter puts
more meaningful atom name, e.g., 'HCA' for a H bonded to a CA and not a simply
'H' as *babel* does.

In a script-like way:
{{{
# Assuming Complex.pdb (= 1BVG.pdb), split it in Protein.pdb and Ligand.pdb
wget -c "http://www.pdb.org/pdb/download/downloadFile.do?fileFormat=pdb&compression=NO&structureId=1BVG" -O 1BVG.pdb
grep 'ATOM  ' 1BVG.pdb>| Protein.pdb
grep 'HETATM' 1BVG.pdb>| Ligand.pdb

# Edit Protein.pdb according to ffAMBER (http://chemistry.csulb.edu/ffamber/#usage)
sed s/PRO\ A\ \ \ 1/NPROA\ \ \ 1/g Protein.pdb | sed s/PRO\ B\ \ \ 1/NPROB\ \ \ 1/g \
| sed s/PHE\ A\ \ 99/CPHEA\ \ 99/g | sed s/PHE\ B\ \ 99/CPHEB\ \ 99/g \
| sed s/O\ \ \ CPHE/OC1\ CPHE/g | sed s/OXT\ CPHE/OC2\ CPHE/g \
| sed s/HIS\ /HID\ /g | sed s/LYS\ /LYP\ /g | sed s/CYS\ /CYN\ /g >| ProteinAmber.pdb

# Process with pdb2gmx and define water
pdb2gmx -ff amber99sb -f ProteinAmber.pdb -o Protein2.pdb -p Protein.top -water tip3p -ignh

# Generate Ligand topology file with acpypi (GAFF)
acpypi -i Ligand.pdb

# Merge Protein2.pdb + updated Ligand_NEW.pdb -> Complex.pdb
grep -h ATOM Protein2.pdb Ligand.acpypi/Ligand_NEW.pdb >| Complex.pdb

# Edit Protein.top -> Complex.top
\cp Ligand.acpypi/Ligand_GMX.itp Ligand.itp
\cp Protein.top Complex.top
# See NB(1) below
cat Complex.top | sed '/\;\ Include\ chain\ topologies/i\
#include "Ligand.itp"
' >| Complex2.top
echo "Ligand   1" >> Complex2.top
\mv Complex2.top Complex.top

# Setup the box and add water
editconf -bt triclinic -f Complex.pdb -o Complex.pdb -d 1.0
genbox -cp Complex.pdb -cs ffamber_tip3p.gro -o Complex_b4ion.pdb -p Complex.top

# Create em.mdp file
cat << EOF >| em.mdp
cpp                      = /usr/bin/cpp
define                   = -DFLEXIBLE
integrator               = cg ; steep
nsteps                   = 200
constraints              = none
emtol                    = 1000.0
nstcgsteep               = 10 ; do a steep every 10 steps of cg
emstep                   = 0.01 ; used with steep
nstcomm                  = 1
coulombtype              = PME
ns_type                  = grid
rlist                    = 1.0
rcoulomb                 = 1.0
rvdw                     = 1.4
Tcoupl                   = no
Pcoupl                   = no
gen_vel                  = no
nstxout                  = 0 ; write coords every # step
optimize_fft             = yes
EOF

# Create md.mdp file
cat << EOF >| md.mdp
integrator               = md
nsteps                   = 1000
dt                       = 0.002
constraints              = all-bonds
nstcomm                  = 1
ns_type                  = grid
rlist                    = 1.2
rcoulomb                 = 1.1
rvdw                     = 1.0
vdwtype                  = shift
rvdw-switch              = 0.9
coulombtype              = PME-Switch
Tcoupl                   = v-rescale
tau_t                    = 0.1 0.1
tc-grps                  = protein non-protein
ref_t                    = 300 300
Pcoupl                   = parrinello-rahman
Pcoupltype               = isotropic
tau_p                    = 0.5
compressibility          = 4.5e-5
ref_p                    = 1.0
gen_vel                  = yes
nstxout                  = 2 ; write coords every # step
lincs-iter               = 2
DispCorr                 = EnerPres
EOF

# Setup ions
grompp -f em.mdp -c Complex_b4ion.pdb -p Complex.top -o Complex_b4ion.tpr
\cp Complex.top Complex_ion.top
echo 13| genion -s Complex_b4ion.tpr -o Complex_b4em.pdb -neutral -conc 0.15 -p Complex_ion.top -norandom
\mv Complex_ion.top Complex.top

# Run minimisaton
grompp -f em.mdp -c Complex_b4em.pdb -p Complex.top -o em.tpr
mdrun -v -deffnm em

# Run a short simulation
grompp -f md.mdp -c em.gro -p Complex.top -o md.tpr
mdrun -v -deffnm md
#summary An example illustrating how to use ACPYPI with GROMACS and AMBER99SB
# or with openmpi, for a dual core
grompp -f em.mdp -c Complex_b4em.pdb -p Complex.top -o em.tpr
om-mpirun -n 2 mdrun_mpi -v -deffnm em
grompp -f md.mdp -c em.gro -p Complex.top -o md.tpr
om-mpirun -n 2 mdrun_mpi -v -deffnm md

# Visualise with VMD
vmd md.gro md.trr
}}}

*NB(1):* `#include "Ligand.itp"` has to be inserted right after `ffamber**.itp`
line and before `Protein_*.itp` line in _Complex.top_.

Voila!

====NOTE====
    * I am trying to set up here the same simulation conditions as in [TutorialNAMD], althought NAMD system ended up with 30 atoms of water more and it runs in double precision while GROMACS in single precision.
    * GROMACS is much faster than NAMD in my Mac Intel Duo Core 2Ghz:
        * 1 proc.: 694%
        * 2 proc.: 624%
    * But NAMD scales better when using 2 proc.:
        * gain of 80% for NAMD
        * gain of 64% for GROMACS

Let's wait for and see GROMACS 4.